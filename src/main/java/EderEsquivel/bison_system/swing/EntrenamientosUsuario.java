/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package EderEsquivel.bison_system.swing;


import EderEsquivel.bison_system.CamposVaciosException;
import EderEsquivel.bison_system.DatosGenerales;
import EderEsquivel.bison_system.model.DetallesEntrenamiento;
import EderEsquivel.bison_system.model.Entrenamientos;
import EderEsquivel.bison_system.model.SeriesEntrenamiento;
import EderEsquivel.bison_system.services.DatosDeUsuarioServices;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *Interfaz grafica que muestra los entrenamientos realizado por el usurio.
 * 
 * Esta ventana muestra todos los entrenamientos realizado por el usuario,junto
 * con sus ejercicios y series.
 * 
 * @author edere
 */
public class EntrenamientosUsuario extends javax.swing.JInternalFrame {
    
    private DatosDeUsuarioServices duS;
    
    /**
     * Lista de {@link Entrenamientos} que guarda todos los entrenamientos hechos
     * por el usuario.
     */
    private List<Entrenamientos> listaEnt;
    
    /**
     * Lista de {@link DetallesEntrenamiento} que guarda todos los detalles.
     *
     */
    private List<DetallesEntrenamiento> listaDE;
    
    /**
     * Guarda el indice de un registro de un JTable
     */
    public int fila;
   
    /**
     * Contructor inicializa todo los entrenamientos hechos por el usuario.
     * 
     * @param duS Instancia del servicio {@link DatosDeUsuarioServices}.
     */
    public EntrenamientosUsuario(DatosDeUsuarioServices duS) {
        initComponents();
        this.duS=duS;
        if(!DatosGenerales.hayConexion()){
            JOptionPane.showMessageDialog(this,
                    "No hay conexion a internet",
                    "Â¡Sin conexion!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }else{
            cargarEntrenamientos();
        }
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tEntrenamientos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnDetalles = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tSeries = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tEjercicios = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);

        tEntrenamientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Nombre de Entrenamiento", "Descripcion", "Duracion(min)", "Observaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tEntrenamientos);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(26, 35, 126));
        jLabel1.setText("Entrenamientos");

        btnDetalles.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnDetalles.setText("Ver detalles");
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });

        tSeries.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tSeries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero de serie", "Repeticiones", "Peso(kg)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tSeries);

        tEjercicios.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tEjercicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ejercicio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tEjercicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tEjerciciosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tEjercicios);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(btnDetalles)
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDetalles)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Este boton muestra los ejercicios hechos por el usuario y sus respectivas
     * series en JTable.
     * 
     * @param evt Evento que sucede al dar click al boton.
     */
    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        // TODO add your handling code here:
        try{
            //Verifica que se este seleccionando un entrenamiento de la tabla.
            fila=tEntrenamientos.getSelectedRow();
            if(fila == -1){
                throw new CamposVaciosException("Selecciona un usuario para editar");
            }
            
            if(!DatosGenerales.hayConexion()){
                throw new Exception("No hay conexion a internet");
            }
            //Vacia las tablas tEjericios y tSeries.
            DefaultTableModel modelE = (DefaultTableModel) tEjercicios.getModel();
            modelE.setRowCount(0);
            
            DefaultTableModel modelS = (DefaultTableModel) tSeries.getModel();
            modelS.setRowCount(0);
            
            cargarEjercicio(fila);
            
            
            
        }catch(CamposVaciosException ex){
               JOptionPane.showMessageDialog(this, ex.getMessage(), "Â¡Error!",
                       JOptionPane.ERROR_MESSAGE);

        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Â¡Error!",
                       JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_btnDetallesActionPerformed
    
    /**
     * Este metodo carga las series de un ejercicio en un tabla.
     * 
     * @param evt Evento que sucede al presionar un registro de un JTable.
     */
    private void tEjerciciosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tEjerciciosMouseClicked
        // TODO add your handling code here:
        int filaS = tEjercicios.rowAtPoint(evt.getPoint());
        if (filaS != -1) {
            //Metodo de carga.
            cargarDetalles(filaS);
        }
    }//GEN-LAST:event_tEjerciciosMouseClicked
    
    /**
     * Este metodo carga la todos los entrenamientos realizados por el usuario
     * y los ingresa a la tabla.
     */
    private void cargarEntrenamientos() {
        try{
            if(!DatosGenerales.hayConexion()){
                throw new Exception("No hay conexion a internet");
            }
            
            // Limpiar la tabla
            DefaultTableModel model = (DefaultTableModel) tEntrenamientos.getModel();
            model.setRowCount(0); 
            
            //Consulta a la base de datos llos entrenamientos.
            listaEnt=duS.entrenamientosUsuario(DatosGenerales.getInfoUsuarios().getId());
            for (Entrenamientos ent:listaEnt) {
                    model.addRow(new Object[]{
                        ent.getFecha().toString(),
                        ent.getNombre(),
                        ent.getDescripcion(),
                        ent.getDuracion_minutos(),
                        ent.getObservaciones()
                    });

            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Â¡Error!",
                       JOptionPane.ERROR_MESSAGE);
        }
        
    }
    /**
     * Este metodo carga todos los ejercicios hechos en un entrenamiento seleccionado.
     * 
     * @param idEnt ID del entrenamiento seleccionado.
     */
    private void cargarEjercicio(int idEnt){
        try{
            if(!DatosGenerales.hayConexion()){
                throw new Exception("No hay conexion a internet");
            }
            
            //Vacia la tabla.
            DefaultTableModel model = (DefaultTableModel) tEjercicios.getModel();
            model.setRowCount(0);
        
            /*
            Consulta a la base de datos los ejercicios realizados en el 
            entrenamiento
            */
            listaDE=duS.detallesEntreUsuario(listaEnt.get(idEnt).getId_entrenamiento());
            
            //Carga los datos en la tabla.
            for(DetallesEntrenamiento detalle: listaDE){
                model.addRow(new Object[]{ 
                    detalle.getId_ejer().getNombre()
                });

            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Â¡Error!",
                       JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    
    /**
     * Metodo que carga la informacion de la series de un ejercicio de un 
     * entrenamiento seleccionado.
     * 
     * @param idEjer ID del ejercicio del entrenamiento seleccionado.
     */
    private void cargarDetalles(int idEjer){
        try{
            if(!DatosGenerales.hayConexion()){
                throw new Exception("No hay conexion a internet");
            }
            
            //Vacia la tabla.
            DefaultTableModel model = (DefaultTableModel) tSeries.getModel();
             model.setRowCount(0);
             
            Long id = listaDE.get(idEjer).getId_detalle();
            
            //Consulta las series del entrenamieto.
            List<SeriesEntrenamiento> listaDS=duS.SeriesEntreUsuario(id);
            
            //Carga los datos a la tabla,
            for(SeriesEntrenamiento se:listaDS){
                model.addRow(new Object[]{
                        se.getNumero_serie(),
                        se.getRepeticiones(),
                        se.getPeso_usado()
                });
             }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Â¡Error!",
                       JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tEjercicios;
    private javax.swing.JTable tEntrenamientos;
    private javax.swing.JTable tSeries;
    // End of variables declaration//GEN-END:variables
}
