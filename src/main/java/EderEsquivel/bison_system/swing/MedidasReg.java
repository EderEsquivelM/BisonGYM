/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package EderEsquivel.bison_system.swing;

import EderEsquivel.bison_system.CamposVaciosException;
import EderEsquivel.bison_system.DatosGenerales;
import EderEsquivel.bison_system.services.MedidasServices;
import EderEsquivel.bison_system.model.Medidas;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 *Interfaz grafica para mostrar y editar las medidas corporales del usuario.
 * 
 * Esta interfa permite mostrar y editar las medidades corporles.
 * 
 * Se conecta al servicio con la clase {@link MedidasServices}.
 * 
 * @author edere
 */
public class MedidasReg extends javax.swing.JInternalFrame{
    
    private MedidasServices mS;
    String pesoS;
    String alturaS;
    String pGCS;
    String imcS;
            
    
    /**
     * Contructor que inicializa el servicio.
     * @param mS Instancia del servicio {@link MedidasServices}
     */
    public MedidasReg(MedidasServices mS) {
        this.mS=mS;
        initComponents();
        taIMC.setEditable(false);
        this.setResizable(false);
        
        //Verifica que haya conexion a internet.
        if(!DatosGenerales.hayConexion()){
            JOptionPane.showMessageDialog(this,
                    "No hay conexion a internet",
                    "¡Sin conexion!", JOptionPane.ERROR_MESSAGE);
            
        }else{
            
            if(mS.buscarMedidaUsuario(DatosGenerales.getInfoUsuarios())==null){
                pesoS= JOptionPane.showInputDialog(this,"Ingresa tu peso");
                alturaS= JOptionPane.showInputDialog(this,"Ingresa tu altura en metros");
                pGCS= JOptionPane.showInputDialog(this,"Ingresa tu porcetaje de grasa corporal");

                double peso = Double.parseDouble(pesoS);
                double altura = Double.parseDouble(alturaS);
                Integer pGC=Integer.parseInt(pGCS);

                Medidas med=new Medidas(DatosGenerales.getInfoUsuarios(),LocalDate.now(),peso,altura,pGC);
                med=mS.actualizarMedida(med);
                mostrarInformacion(med);

            }else{
                
                Medidas med=null;
                med=mS.buscarMedidaUsuario(DatosGenerales.getInfoUsuarios());
                mostrarInformacion(med);

            }
        }
        
       
       editable(false); 
    }
    
    /**
     * Este metodo que sea visibles ciertos componentes de la interfaz grafica.
     * 
     * @param estado Bool
     */
    public void editable(boolean estado){
        tfPeso.setEditable(estado);
        tfAltura.setEditable(estado);
        tfPG.setEditable(estado);
        btnAplicar.setEnabled(estado);
    }
    
    /**
     * Este metodo muestra la ultima medidion en la interfaz grafica.
     * 
     * @param med Objeto {@link Medidas}
     */
    public void mostrarInformacion(Medidas med){
        //Calcula el IMC
        float imc=(float) (med.getPeso()/(med.getAltura()*med.getAltura()));
        
        pesoS=String.valueOf(med.getPeso());
        alturaS=String.valueOf(med.getAltura());
        pGCS=String.valueOf(med.getPorcentaje_grasa())
                ;
        imcS=String.format("%.2f", imc);
        
        tfPeso.setText(pesoS);
        tfAltura.setText(alturaS);
        tfPG.setText(pGCS);
        taIMC.setText(imcS);
        
        String clasificacionIMC;
        if(imc < 18.5)
            clasificacionIMC = "Bajo peso";
        else if(imc < 25)
            clasificacionIMC = "Normal";
        else if(imc < 30)
            clasificacionIMC = "Sobrepeso";
        else
            clasificacionIMC = "Obesidad";
        

        lblIMC.setText("Clasificación: " + clasificacionIMC);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfPeso = new javax.swing.JTextField();
        tfAltura = new javax.swing.JTextField();
        tfPG = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();
        btnAplicar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taIMC = new javax.swing.JTextArea();
        lblIMC = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);

        jPanel1.setBackground(java.awt.SystemColor.window);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(26, 35, 126));
        jLabel1.setText("Medidas");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Peso:");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Altura:");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Porcentaje de grasa:");

        tfPeso.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfPeso.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tfAltura.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfAltura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tfPG.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfPG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnEditar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnAplicar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnAplicar.setText("Aplicar");
        btnAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel5.setText("IMC: ");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        taIMC.setColumns(20);
        taIMC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        taIMC.setRows(5);
        taIMC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(taIMC);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel5))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblIMC)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(tfPeso)
                            .addComponent(tfAltura)
                            .addComponent(tfPG)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(btnEditar)
                        .addGap(53, 53, 53)
                        .addComponent(btnAplicar)))
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(139, 139, 139))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(lblIMC)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnAplicar))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Boton que habilita cietos controles de la interfaz grafica.
     * 
     * @param evt Evento de accion del boton.
     */
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        editable(true);
    }//GEN-LAST:event_btnEditarActionPerformed
    
    /**
     * Boton que manda a la base de datos los cambios que hizo el usuario a 
     * sus medidas corporales.
     * 
     * @param evt Evento de accion del boton.
     */
    private void btnAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarActionPerformed
        // TODO add your handling code here:
        try {
            // Intentar parsear valores y validar que no sean negativos
            double peso = Double.parseDouble(tfPeso.getText());
            double altura = Double.parseDouble(tfAltura.getText());
            int porcentajeGrasa = Integer.parseInt(tfPG.getText());

            if (peso < 0) {
                throw new CamposVaciosException("El peso no puede ser negativo.");
            }
            if (altura < 0) {
                throw new CamposVaciosException("La altura no puede ser negativa.");
            }
            if (porcentajeGrasa < 0) {
                throw new CamposVaciosException("El porcentaje de grasa no puede ser negativo.");
            }
            if(!DatosGenerales.hayConexion()){
                throw new Exception("No hay conexión a internet.\nIntente reconectarse a una red.");
               
            }
            // Si pasa la validación, crear la medida y actualizar
            Medidas nuevaMedida = new Medidas(DatosGenerales.getInfoUsuarios(), LocalDate.now(), peso, altura, porcentajeGrasa);
            nuevaMedida = mS.actualizarMedida(nuevaMedida);

            mostrarInformacion(nuevaMedida);
            editable(false);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (CamposVaciosException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de validación", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAplicarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIMC;
    private javax.swing.JTextArea taIMC;
    private javax.swing.JTextField tfAltura;
    private javax.swing.JTextField tfPG;
    private javax.swing.JTextField tfPeso;
    // End of variables declaration//GEN-END:variables
}
