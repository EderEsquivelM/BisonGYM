/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package EderEsquivel.bison_system.swing;

import EderEsquivel.bison_system.CamposVaciosException;
import EderEsquivel.bison_system.DatosGenerales;
import EderEsquivel.bison_system.model.Usuarios;
import EderEsquivel.bison_system.services.UsuariosServices;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *Interfaz grafica para administrar los usuarios.
 * 
 * Esta ventana permite editar y gestionar los datos de los usuarios.
 * 
 * Se conecta al servicio con la clase {@link UsuariosServices} para obtener los
 * datos y actualizar la informacion.
 * 
 * @author edere
 */
public class AdministradorDeUsuarios extends javax.swing.JInternalFrame {
    
    private UsuariosServices usS;
    
    /**
     * Guarda un usuario consultado
     */
    private Usuarios usuarioOriginal;
    
    /**
     * Guarda todos los usuarios del sistema para despues ser mostrado en un JTable.
     */
    private List<Usuarios> listaUsuarios=new ArrayList();
    
    /**
     * Constructo que iniizaliza la instancia del servicio.
     * 
     * @param usS Instancia del servicio {@link UsuariosServices} utilizada
     * para obtener y actualizar la información de los usuarios.
     */
    public AdministradorDeUsuarios(UsuariosServices usS) {
        this.usS=usS;
        initComponents();
        this.setResizable(false);
        /*
        Al iniciar esta ventana verifica si hay conexion a internet, si es el 
        caso consulta todos los usuarios y los carga con la funcion
        cargarUsuariosEnTabla()
        */
        if(!DatosGenerales.hayConexion()){
            JOptionPane.showMessageDialog(this,
                    "No hay conexion a internet",
                    "¡Sin conexion!", JOptionPane.ERROR_MESSAGE);
        }else{
            listaUsuarios = usS.obtenerTodosUsuarios();
            listaUsuarios.sort(Comparator.comparing(Usuarios::getId));
            cargarUsuariosEnTabla();
        }
        
        editarVisibles(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tUsuarios = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAplicar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        tfApellido = new javax.swing.JTextField();
        tfCorreo = new javax.swing.JTextField();
        tfUsername = new javax.swing.JTextField();
        tfContrasenia = new javax.swing.JTextField();
        cbActivo = new javax.swing.JCheckBox();
        btnCancelar = new javax.swing.JButton();
        cbxFiltro = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        tfFiltro = new javax.swing.JTextField();
        btnRestaurar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        tUsuarios.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Apellido", "Correo", "Username", "Contraseña", "Activo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tUsuarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tUsuarios);

        btnEditar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Nombre");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Username");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Apellido");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Contraseña");

        btnAplicar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnAplicar.setText("Aplicar");
        btnAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel5.setText("Correo");

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel6.setText("Activo");

        tfNombre.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        tfApellido.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        tfCorreo.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        tfUsername.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        tfContrasenia.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        cbActivo.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        cbxFiltro.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Apellido", "Username", "Correo" }));
        cbxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFiltroActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel7.setText("Filtro:");

        tfFiltro.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfFiltroKeyReleased(evt);
            }
        });

        btnRestaurar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnRestaurar.setText("Restaurar");
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 251, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(132, 132, 132))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(tfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(tfCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbActivo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(btnEditar)
                        .addGap(42, 42, 42)
                        .addComponent(btnAplicar)
                        .addGap(40, 40, 40)
                        .addComponent(btnCancelar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(tfFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRestaurar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(tfFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRestaurar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnAplicar)
                    .addComponent(btnCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbActivo))
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(26, 26, 26))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este boton lo que hace es habilitar el boton para aplicar los cambios
     * y asi mismo manda a varios JTextField la informacion del usuario 
     * seleccionado en la tabla y asi poder editar.
     * 
     * @param evt Evento que sucede al dar click al boton.
     */
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        
        try{
            //Guarda el indice que se esta seleccionando en la tabla
            int fila = tUsuarios.getSelectedRow();
            
            //Verifica que se este seleccionando un registro de JTable tUsuarios.
            if(fila == -1){
                throw new CamposVaciosException("Selecciona un usuario para editar");
            }
            
            editarVisibles(true);
            
            //Hace un Cast en los registro del usuario seleccionado
            String nuevoNombre = (String) tUsuarios.getValueAt(fila, 1);
            String nuevoApellido = (String) tUsuarios.getValueAt(fila, 2);
            String nuevoCorreo = (String) tUsuarios.getValueAt(fila, 3);
            String nuevoUsername = (String) tUsuarios.getValueAt(fila, 4);
            String nuevaContrasenia = (String) tUsuarios.getValueAt(fila, 5);
            boolean activo = (boolean) tUsuarios.getValueAt(fila, 6);
            
            //Deshabilita el poder seleccionar otro usuario al estar editando uno.
            tUsuarios.setRowSelectionAllowed(false);
            
            //Se refleja los datos del usuario en los JTextField.
            tfNombre.setText(nuevoNombre);
            tfApellido.setText(nuevoApellido);
            tfCorreo.setText(nuevoCorreo);
            tfUsername.setText(nuevoUsername);
            tfContrasenia.setText(nuevaContrasenia);
            cbActivo.setSelected(activo);
            
        }catch(CamposVaciosException ex){
                JOptionPane.showMessageDialog(this,ex.getMessage(),"¡Error!", JOptionPane.ERROR_MESSAGE);       
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Ha ocurrido un error inesperado.\nDetalle: " + ex.getMessage(),
                    "¡Error!", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
            
    }//GEN-LAST:event_btnEditarActionPerformed
    
    /**
     * Boton que aplica los cambios al editar un usuario y los refleja en la
     * tabla.
     * 
     * @param evt Evento que sucede al dar click al boton.
     */
    private void btnAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarActionPerformed
        // TODO add your handling code here:
        
        //Declaracion de una variable auxiliar.
        Usuarios usuarioEditar;
        
        //Guarda el indice que se esta seleccionando en la tabla
        int fila = tUsuarios.getSelectedRow();
        
        /*
        Castea el campo ID del registro que se selecciono para editarlo en la 
        base de datos.
        */
        Long idU = (Long) tUsuarios.getValueAt(fila, 0);
        
        //Busca al usuario y lo retorna para guardarlo en una variable local.
        usuarioOriginal=usS.buscarUsuarioID(idU);
        usuarioEditar=usuarioOriginal;
        try{
            //Verificacion de campos vacios.
            if(tfNombre.getText().trim().isEmpty() || tfApellido.getText().trim().isEmpty()
               || tfUsername.getText().trim().isEmpty() || tfCorreo.getText().trim().isEmpty()
               || tfContrasenia.getText().trim().isEmpty()){
                throw new CamposVaciosException("No debes dejar campos vacios");
            
            }
            
            //Verifica la extencion del correo
            if(!DatosGenerales.correoValido(tfCorreo.getText().trim())){
                   throw new CamposVaciosException("La dirección de correo electrónico no es válida.");
            }
            
            if(tfUsername.getText().length()<5){
                throw new CamposVaciosException("La longitud del username debe ser\nminimo 5 de caracteres");
            }
            
            if(tfContrasenia.getText().length()<8){
               throw new CamposVaciosException("La longitud del la contraseña debe ser\nminimo 8 de caracteres");
            }
            
            // Verificar que el correo no esté registrado por otro usuario
            if(usS.correoVerificar(tfCorreo.getText().trim())) {
                /* 
                Aquí asumimos que correoVerificar solo dice si existe en la base 
                de datos. Si el correo es distinto al actual, entonces error
                */
                if(!tfCorreo.getText().trim().equalsIgnoreCase(usuarioOriginal.getCorreo())) {
                    throw new Exception("El correo '"+ tfCorreo.getText() +"' ya está registrado");
                }
            }

            // Verificar que el username no esté registrado por otro usuario
            if(usS.usernameVerificar(tfUsername.getText().trim())) {
                if(!tfUsername.getText().trim().equalsIgnoreCase(usuarioOriginal.getUsername())) {
                    throw new Exception("El usuario '"+ tfUsername.getText() +"' ya está registrado");
                }
            }
            
            if (!DatosGenerales.hayConexion()) {
                throw new Exception("No hay conexión a internet.\nIntente reconectarse a una red.");
            }
            
            if(!DatosGenerales.hayConexion()){
            throw new Exception("No hay conexion a internet");
            }
            
            //Aplica los cambios que se realizaron al usuario
            usuarioEditar.setNombre(tfNombre.getText().trim());
            usuarioEditar.setApellido(tfApellido.getText().trim());
            usuarioEditar.setCorreo(tfCorreo.getText().trim());
            usuarioEditar.setUsername(tfUsername.getText().trim());
            usuarioEditar.setPassword_hash(tfContrasenia.getText().trim());
            usuarioEditar.setActivo(cbActivo.isSelected());
            
            //Si se realizo correctamente el guardado,lo indicara con un JOptionPane.
            if(usS.actualizarUsuarioAdmin(usuarioEditar)){
                JOptionPane.showMessageDialog(this, "Usuario actualizado", "Actualizado",
                           JOptionPane.INFORMATION_MESSAGE);
                listaUsuarios = usS.obtenerTodosUsuarios();
                listaUsuarios.sort(Comparator.comparing(Usuarios::getId));
                editarVisibles(false);
                cargarUsuariosEnTabla();
                tUsuarios.setRowSelectionAllowed(true);
                
            }else{
                throw new Exception("No se pudo actualizar el usuario");
            }
        }catch(CamposVaciosException ex){
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "¡Error!", JOptionPane.ERROR_MESSAGE);
        
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Ha ocurrido un error inesperado.\nDetalle: " + ex.getMessage(),
                    "¡Error!", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } 
        
    }//GEN-LAST:event_btnAplicarActionPerformed
    
    /**
     * Cancela el proceso de editado de un usuario.
     * 
     * @param evt Evento que sucede al dar click al boton.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        //Borra los datos consultados
        usuarioOriginal=null;
        editarVisibles(false);
        tUsuarios.setRowSelectionAllowed(true);

    }//GEN-LAST:event_btnCancelarActionPerformed
    
    /**
     * Campo de texto para buscar por un filtro en especifico.
     * 
     * @param evt Evento que sucede al escribir en un JTextField.
     */
    private void tfFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFiltroKeyReleased
        // TODO add your handling code here:
        
        // Verificar si se selecciono un tipo de filtro.
        if(cbxFiltro.getSelectedItem() != null){ 
            filtrarUsuarios();
        }
    }//GEN-LAST:event_tfFiltroKeyReleased
    
    /**
     *Boton que restaura el filtro por defecto(Nombre).
     * 
     * @param evt Evento que sucede al dar click al boton.
     */
    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed
        // TODO add your handling code here:
        tfFiltro.setText("");
        cbxFiltro.setSelectedIndex(0);
        cargarUsuariosEnTabla();
    }//GEN-LAST:event_btnRestaurarActionPerformed

    /**
     * Selector para escoger un filtro.
     * 
     * @param evt Evento que sucede al dar seleccionar un elemento del JComboBox.
     */
    private void cbxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFiltroActionPerformed
        // TODO add your handling code here
        if (!tfFiltro.getText().isEmpty() && cbxFiltro.getSelectedItem() != null){
            filtrarUsuarios();
        }
    }//GEN-LAST:event_cbxFiltroActionPerformed
    
    
    /**
     * Este metodo lo que hace es cargar todos los usuarios en la tabla.
     */
    private void cargarUsuariosEnTabla() {
        DefaultTableModel model = (DefaultTableModel) tUsuarios.getModel();
        model.setRowCount(0); // Limpiar la tabla
        
        //For each para leer elemento por elemento.
        for (Usuarios u : listaUsuarios) {
            if (u.getTipoUsuario() != null && u.getTipoUsuario().getId_t_usuario() == 1) {
                model.addRow(new Object[]{
                    u.getId(),
                    u.getNombre(),
                    u.getApellido(),
                    u.getCorreo(),
                    u.getUsername(),
                    u.getPasswordHash(),
                    u.isActivo()
                });
            }
        }
    }
    
    /**
     * Filtra la lista de usuarios mostrada en la tabla según el texto ingresado
     * y el campo seleccionado en el JComboBox de filtros.
     * 
     * El filtro se aplica en los campos: nombre, apellido, username o correo,
     * dependiendo de la selección actual. La búsqueda no distingue entre mayúsculas
     * y minúsculas
     * 
     */
    private void filtrarUsuarios() {
        // Verificar que hay un campo seleccionado.
        if(cbxFiltro.getSelectedItem() == null) {
            return;
        }
        
         // Obtener el texto ingresado por el usuario y convertirlo a minúsculas.
        String textoBusqueda = tfFiltro.getText().trim().toLowerCase();
        
        String campoSeleccionado = cbxFiltro.getSelectedItem().toString().toLowerCase();

        // Si no se ingresó texto, recargar la tabla con todos los usuarios sin filtro.
        if (textoBusqueda.isEmpty()) {
            cargarUsuariosEnTabla();
            return;
        }
        
        //Limpia la tabla.
        DefaultTableModel model = (DefaultTableModel) tUsuarios.getModel();
        model.setRowCount(0);
        
        // Ordenar la lista de usuarios por ID antes de aplicar el filtro.
        listaUsuarios.sort(Comparator.comparing(Usuarios::getId));

        for (Usuarios u : listaUsuarios) {
            String valorCampo = "";

            switch (campoSeleccionado) {
                case "nombre":
                    valorCampo = u.getNombre().toLowerCase();
                    break;
                case "apellido":
                    valorCampo = u.getApellido().toLowerCase();
                    break;
                case "username":
                    valorCampo = u.getUsername().toLowerCase();
                    break;
                case "correo":
                    valorCampo = u.getCorreo().toLowerCase();
                    break;
                default:  // Caso por defecto por si acaso
                    valorCampo = u.getNombre().toLowerCase();
            }

            if (valorCampo.contains(textoBusqueda)) {
                if (u.getTipoUsuario() != null && u.getTipoUsuario().getId_t_usuario() == 1) {
                model.addRow(new Object[]{
                    u.getId(),
                    u.getNombre(),
                    u.getApellido(),
                    u.getCorreo(),
                    u.getUsername(),
                    u.getPasswordHash(),
                    u.isActivo()
                });
                }
            }
        }
    }
    private void editarVisibles(boolean b){
        tfNombre.setVisible(b);
        tfApellido.setVisible(b);
        tfCorreo.setVisible(b);
        tfUsername.setVisible(b);
        tfContrasenia.setVisible(b);
        cbActivo.setVisible(b);
        jLabel1.setVisible(b);
        jLabel2.setVisible(b);
        jLabel3.setVisible(b);
        jLabel4.setVisible(b);
        jLabel5.setVisible(b);
        jLabel6.setVisible(b);
        btnAplicar.setEnabled(b);
        btnCancelar.setVisible(b);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JCheckBox cbActivo;
    private javax.swing.JComboBox<String> cbxFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tUsuarios;
    private javax.swing.JTextField tfApellido;
    private javax.swing.JTextField tfContrasenia;
    private javax.swing.JTextField tfCorreo;
    private javax.swing.JTextField tfFiltro;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
}
