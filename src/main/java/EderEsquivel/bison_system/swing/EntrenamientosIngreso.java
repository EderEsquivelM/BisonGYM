/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package EderEsquivel.bison_system.swing;

import EderEsquivel.bison_system.DatosGenerales;
import EderEsquivel.bison_system.model.DetallesEntrenamiento;
import EderEsquivel.bison_system.model.Ejercicios;
import EderEsquivel.bison_system.model.SeriesEntrenamiento;
import EderEsquivel.bison_system.model.Usuarios;
import EderEsquivel.bison_system.model.ZonasAnatomicas;
import EderEsquivel.bison_system.services.DetallesEntrenamientoServices;
import EderEsquivel.bison_system.services.EntrenamientosServices;
import EderEsquivel.bison_system.services.SeriesEntrenamientoServices;
import static EderEsquivel.bison_system.swing.CategoriasEjercicios.listaEjercicios;
import java.awt.Frame;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author edere
 */
public class EntrenamientosIngreso extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form Entrenamientos
     */
    public EntrenamientosIngreso(EntrenamientosServices eS,DetallesEntrenamientoServices deS,
            SeriesEntrenamientoServices seS) {
        this.eS=eS;
        this.deS=deS;
        this.seS=seS;
        initComponents();
        this.setResizable(false);
        for (ZonasAnatomicas zona : DatosGenerales.zonasAnatomicasMap.values()) {
            cbxCategoria.addItem(zona.getNombre_zona());
        }
        cbxCategoria.setSelectedIndex(-1);
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbxCategoria = new javax.swing.JComboBox<>();
        cbxEjercicio = new javax.swing.JComboBox<>();
        btnSC = new javax.swing.JButton();
        btnSE = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TEjerciciosS = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnDE = new javax.swing.JButton();
        btnCD = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jPanel1.setBackground(java.awt.SystemColor.window);

        cbxCategoria.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        cbxEjercicio.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        btnSC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnSC.setText("Seleccionar Categoria");
        btnSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSCActionPerformed(evt);
            }
        });

        btnSE.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnSE.setText("Seleccionar Ejercicio");
        btnSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSEActionPerformed(evt);
            }
        });

        TEjerciciosS.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        TEjerciciosS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ejercicio", "Series"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TEjerciciosS);
        if (TEjerciciosS.getColumnModel().getColumnCount() > 0) {
            TEjerciciosS.getColumnModel().getColumn(0).setResizable(false);
            TEjerciciosS.getColumnModel().getColumn(1).setResizable(false);
        }

        btnEliminar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnModificar.setText("Modificar Numero de Series");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnDE.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnDE.setText("Detalles de ejercicio");
        btnDE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDEActionPerformed(evt);
            }
        });

        btnCD.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnCD.setText("Cargar datos");
        btnCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCD)
                                .addGap(177, 177, 177)))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxEjercicio, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(btnSE, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxEjercicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSC)
                    .addComponent(btnSE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnModificar)
                    .addComponent(btnDE))
                .addGap(18, 18, 18)
                .addComponent(btnCD)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSCActionPerformed
        // TODO add your handling code here:
        cbxEjercicio.removeAllItems();
        int idZonaSelecionada=cbxCategoria.getSelectedIndex()+1;
        listaEjercicios=DatosGenerales.obtenerEjerciciosPorZona(idZonaSelecionada);
        for (Ejercicios ejercicio : listaEjercicios) {
            cbxEjercicio.addItem(ejercicio.getNombre());
        }
        cbxEjercicio.setSelectedIndex(-1);
    }//GEN-LAST:event_btnSCActionPerformed

    private void btnSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSEActionPerformed
        // TODO add your handling code here:
        String ejercicioSeleccionado = (String) cbxEjercicio.getSelectedItem();

        // Verificar si ya fue agregado
        boolean yaAgregado = false;
        for (Ejercicios ej : listaEjerciciosSeleccionados) {
            if (ej.getNombre().equals(ejercicioSeleccionado)) {
                yaAgregado = true;
                break;
            }
        }

        if (yaAgregado) {
            JOptionPane.showMessageDialog(this, "Este ejercicio ya ha sido agregado.",
                    "Ejercicio duplicado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Pedir número de series
        String input = JOptionPane.showInputDialog(this, "Ingrese el número de series para el ejercicio " + ejercicioSeleccionado);
        if (input == null || input.trim().isEmpty()) return; // Cancelado o vacío

        int series;
        try {
            series = Integer.parseInt(input.trim());
            if (series <= 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido de series.",
                    "Entrada inválida", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buscar y agregar el ejercicio correspondiente
        for (Ejercicios ej : DatosGenerales.ejerciciosMap.values()) {
            if (ej.getNombre().equals(ejercicioSeleccionado)) {
                listaEjerciciosSeleccionados.add(ej);
                break;
            }
        }

        // Agregar a la tabla
        DefaultTableModel model = (DefaultTableModel) TEjerciciosS.getModel();
        model.addRow(new Object[]{ejercicioSeleccionado, series});
    }//GEN-LAST:event_btnSEActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = TEjerciciosS.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) TEjerciciosS.getModel();
        String nombreEjercicio = (String) model.getValueAt(filaSeleccionada, 0);

        // Buscar y eliminar con for normal
        for (int i = 0; i < listaEjerciciosSeleccionados.size(); i++) {
            if (listaEjerciciosSeleccionados.get(i).getNombre().equals(nombreEjercicio)) {
                listaEjerciciosSeleccionados.remove(i);
                break;
            }
        }

        // Eliminar del mapa
        if (seriesPorEjercicio.containsKey(nombreEjercicio)) {
            seriesPorEjercicio.remove(nombreEjercicio);
        }

        // Eliminar de la tabla
        model.removeRow(filaSeleccionada);
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = TEjerciciosS.getSelectedRow();

        if (filaSeleccionada != -1) {
            DefaultTableModel model = (DefaultTableModel) TEjerciciosS.getModel();

            // Pedir nuevo número de series
            String input = JOptionPane.showInputDialog(this, "Ingrese el nuevo número de series:");
            if (input == null || input.trim().isEmpty()) return;

            int nuevasSeries;
            try {
                nuevasSeries = Integer.parseInt(input.trim());
                if (nuevasSeries <= 0) throw new NumberFormatException();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Número inválido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Actualizar valor en la tabla
            model.setValueAt(nuevasSeries, filaSeleccionada, 1); // columna 1 = Series
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnDEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDEActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = TEjerciciosS.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un ejercicio de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nombreEjercicio = (String) TEjerciciosS.getValueAt(filaSeleccionada, 0);
        int series = (Integer) TEjerciciosS.getValueAt(filaSeleccionada, 1);

        List<SeriesEntrenamiento> detallesSeries = new ArrayList<>();

        for (int i = 0; i < series; i++) {
            String repStr = JOptionPane.showInputDialog(this, "Serie " + (i + 1) + " - Repeticiones:");
            if (repStr == null) return;

            String pesoStr = JOptionPane.showInputDialog(this, "Serie " + (i + 1) + " - Peso (kg):");
            if (pesoStr == null) return;

            try {
                int reps = Integer.parseInt(repStr.trim());
                double peso = Double.parseDouble(pesoStr.trim());
                detallesSeries.add(new SeriesEntrenamiento(null,i+1,reps, peso));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Entrada inválida. Intenta de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Guardar en el mapa
        seriesPorEjercicio.put(nombreEjercicio, detallesSeries);

        // Confirmación
        JOptionPane.showMessageDialog(this, "Series guardadas para el ejercicio: " + nombreEjercicio);
    }//GEN-LAST:event_btnDEActionPerformed

    private void btnCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCDActionPerformed
        // TODO add your handling code here:
         if (verificarSeries(seriesPorEjercicio)&& !listaEjerciciosSeleccionados.isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Series guardadas correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            java.awt.Window ventanaPadre = javax.swing.SwingUtilities.getWindowAncestor(this);
            EntrenamientoDetalles eD = new EntrenamientoDetalles((Frame) ventanaPadre,eS,deS,seS,
                     listaEjerciciosSeleccionados,seriesPorEjercicio);
            eD.setLocationRelativeTo(this);
            eD.setVisible(true);
            cbxCategoria.setSelectedIndex(-1);
            cbxEjercicio.setSelectedIndex(-1);
            DefaultTableModel model = (DefaultTableModel) TEjerciciosS.getModel();
            model.setRowCount(0); 
            listaEjerciciosSeleccionados.clear();
            seriesPorEjercicio.clear();
             
        } else {
             if(listaEjerciciosSeleccionados.isEmpty())
                JOptionPane.showMessageDialog(this, "No hay ejercicios seleccionados", "Error", JOptionPane.ERROR_MESSAGE);
           
        }
        
    }//GEN-LAST:event_btnCDActionPerformed
    
    
    private boolean verificarSeries(Map<String, List<SeriesEntrenamiento>> seriesPorEjercicio) {
        List<String> ejerciciosConSeriesIncompletas = new ArrayList<>();

        for (Ejercicios ejercicio : listaEjerciciosSeleccionados) {
            String nombre = ejercicio.getNombre();
            List<SeriesEntrenamiento> series = seriesPorEjercicio.get(nombre);

            // Validar si hay series para el ejercicio
            if (series == null || series.isEmpty()) {
                ejerciciosConSeriesIncompletas.add(nombre + " (sin series)");
                continue;
            }

            // Obtener el número de series esperadas desde la tabla
            int seriesEsperadas = 0;
            for (int i = 0; i < TEjerciciosS.getRowCount(); i++) {
                if (TEjerciciosS.getValueAt(i, 0).equals(nombre)) {
                    seriesEsperadas = (Integer) TEjerciciosS.getValueAt(i, 1);
                    break;
                }
            }

            // Validar si el número de series ingresadas coincide con las esperadas
            if (series.size() != seriesEsperadas) {
                ejerciciosConSeriesIncompletas.add(nombre + " (esperadas: " + seriesEsperadas + ", ingresadas: " + series.size() + ")");
            }
        }

        // Mostrar el listado de ejercicios incompletos si hay alguno
        if (!ejerciciosConSeriesIncompletas.isEmpty()) {
            String mensaje = "Los siguientes ejercicios tienen problemas con las series:\n\n" +
                             String.join("\n", ejerciciosConSeriesIncompletas);
            JOptionPane.showMessageDialog(this, mensaje, "Error de validación", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }


    public  List<Ejercicios>listaEjerciciosSeleccionados=new ArrayList<>();
    public  Map<String, List<SeriesEntrenamiento>> seriesPorEjercicio = new HashMap<>();
    
    private EntrenamientosServices eS;
    private DetallesEntrenamientoServices deS;
    private SeriesEntrenamientoServices seS;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TEjerciciosS;
    private javax.swing.JButton btnCD;
    private javax.swing.JButton btnDE;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSC;
    private javax.swing.JButton btnSE;
    private javax.swing.JComboBox<String> cbxCategoria;
    private javax.swing.JComboBox<String> cbxEjercicio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
